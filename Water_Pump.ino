#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/70071549-9304-4691-81a9-e1ffb00d999b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int counter;
  CloudSchedule schedule_test;
  bool light;
  bool switct;
  CloudTime time_read;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define Output 5

#include <Ticker.h>
#define LED 2

Ticker statusTicker;
bool ledStatusState = false;
bool isPumping = false;

bool setup_value = false;

bool toggle;

bool firstRun = true;

void WatorPump() {
  if (schedule_test.isActive()) {
    if (toggle) {
      toggle = false;
      switct = true;
      counter = ++counter;
    }
  } else if (!toggle) {
    toggle = true;
    switct = false;
  }


  if (switct && !isPumping) {
    statusTicker.detach();    // หยุดกระพริบ
    digitalWrite(LED, HIGH);  // ติดค้าง
    isPumping = true;
  } else if (!switct && isPumping) {
    statusTicker.attach(1, toggleStatusLED);  // กลับมากระพริบ
    isPumping = false;
  }
  light = switct;
  digitalWrite(Output, switct);
}

void Print() {
  Serial.print("counter : ");
  Serial.print(counter);
  Serial.print("\t");
  Serial.print("switct : ");
  Serial.print(switct);
  Serial.print("\t");
  Serial.print("light : ");
  Serial.print(light);
  Serial.print("\t");
  Serial.println();
}

void toggleStatusLED() {
  ledStatusState = !ledStatusState;
  digitalWrite(LED, ledStatusState);
}

void setup() {
  counter = -1;
  pinMode(LED, OUTPUT);
  pinMode(Output, OUTPUT);

  Serial.begin(9600);
  delay(1500);

  initProperties();                                   // Defined in thingProperties.h
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);  // Connect to Arduino IoT Cloud

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  statusTicker.attach(1, toggleStatusLED);
}

void loop() {
  ArduinoCloud.update();
  if (ArduinoCloud.connected()) {
    time_read = ArduinoCloud.getLocalTime();
  }
  if (setup_value == false && counter != -1 && !schedule_test.isActive()) {
    while (switct) {
      switct = false;
      light = false;
    }
    setup_value = true;
  }
  // Print();
  WatorPump();
}

void onSwitctChange() {
  if (switct) {
    counter = ++counter;
  } else {
    digitalWrite(LED, LOW);
  }
}


void onTimePickerChange() {}
void onTimeReadChange() {}
void onCountChange() {}
void onLightChange() {}
void onScheduleTestChange() {}
void onCounterChange() {}

